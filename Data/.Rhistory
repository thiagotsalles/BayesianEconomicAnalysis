theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
price.graph
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=expression("Price (R$"~m^2))) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=expression("Price (R$"~m^2)) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
price.graph
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=expression("Price (R$"~m^2")")) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=bquote("Price (R$"~m^2*")")) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
# Show price graph
price.graph
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=bquote("Price (R$"*m^2*")")) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
# Show price graph
price.graph
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=bquote("Price (R$"~m^2*")")) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
# Show price graph
price.graph
trend.p <- seq(1, 9)
min.p.sample <- prices.min[1:9]
data.p.min <- list(x=trend.p, y=-min.p.sample, n=length(min.p.sample))
inits.p.min <- function(){ list(alpha0=-50, beta=2, alpha1=0.1)}
sink("gumbel_p_min.txt")
cat("
model {
# PRIOR DISTRIBUTIONS
alpha0 ~ dnorm(0.0, 0.000001)
beta ~ dnorm(0.0, 0.000001)
alpha1 ~ dnorm(0.0, 0.0001)
# LIKELIHOOD
for (i in 1:n) {
y[i] ~ dgumbel(alpha[i], beta)
alpha[i] <- alpha0 + alpha1 * x[i]
}
# PREDICTIVE
for(i in 2:3) {
min_p[i] <- ((alpha0 + alpha1 * (9 + i)) -
beta * log(-log(1 - (1 / i))))
}
}", fill=TRUE)
sink()
gumbel.p.max = bugs(data = data.p.max, inits = inits.p.max,
parameters = c("alpha", "beta", "max_p"),
model = "gumbel_p_max.txt",
n.thin = 4, n.chains = 1,
n.burnin = 5000, n.iter = 12000, codaPkg=F)
# PRELIMINAR FIT MIN
# Inputs for minimum
trend.p <- seq(1, 9)
min.p.sample <- prices.min[1:9]
data.p.min <- list(x=trend.p, y=-min.p.sample, n=length(min.p.sample))
inits.p.min <- function(){ list(alpha0=-50, beta=2, alpha1=0.1)}
# Creating a text file to run the "bugs" function in OpenBUGS software
sink("gumbel_p_min.txt")
cat("
model {
# PRIOR DISTRIBUTIONS
alpha0 ~ dnorm(0.0, 0.000001)
beta ~ dnorm(0.0, 0.000001)
alpha1 ~ dnorm(0.0, 0.0001)
# LIKELIHOOD
for (i in 1:n) {
y[i] ~ dgumbel(alpha[i], beta)
alpha[i] <- alpha0 + alpha1 * x[i]
}
# PREDICTIVE
for(i in 2:3) {
min_p[i] <- ((alpha0 + alpha1 * (9 + i)) -
beta * log(-log(1 - (1 / i))))
}
}", fill=TRUE)
sink()
gumbel.p.min = bugs(data = data.p.min, inits = inits.p.min,
parameters =c("alpha0", "alpha1", "beta", "min_p"),
model = "gumbel_p_min.txt",
n.thin = 4, n.chains = 1,
n.burnin = 5000, n.iter = 12000, codaPkg=F)
# Convergence tests
gumbel.p.min.mcmc <- as.mcmc(gumbel.p.min$sims.matrix[, ])
# Results table, with parameters and weight estimates
hpd.interval.p.min <- HPDinterval(gumbel.p.min.mcmc)
results.p.min <- data.frame(
"Estimate"=gumbel.p.min$summary[, 1],
"HPD lower limit"=hpd.interval.p.min[, 1],
"HPD upper limit"=hpd.interval.p.min[, 2])
results.p.min <- round(results.p.min, 3)
View(results.schum)
View(results.p.min)
# PRELIMINAR FIT MAX
# Inputs for maximum
max.p.sample <- prices.max[1:9]
data.p.max <- list(y=max.p.sample, n=length(max.p.sample))
inits.p.max <- function(){list(alpha=rnorm(1), beta=1)}
# Creating a text file to run the "bugs" function in OpenBUGS software
sink("gumbel_p_max.txt")
cat("
model {
# PRIOR DISTRIBUTIONS
alpha ~ dnorm(0.0, 0.000001)
beta ~ dnorm(0.0, 0.000001)
# LIKELIHOOD
for (i in 1:n) {
y[i] ~ dgumbel(alpha, beta)
}
# PREDICTIVE
for(i in 2:3) {
max_p[i] <- alpha - beta * log(-log(1 - (1 / i)))
}
}", fill=TRUE)
sink()
# algorithm so the results can return to R.
gumbel.p.max = bugs(data = data.p.max, inits = inits.p.max,
parameters = c("alpha", "beta", "max_p"),
model = "gumbel_p_max.txt",
n.thin = 4, n.chains = 1,
n.burnin = 5000, n.iter = 12000, codaPkg=F)
# Convergence tests
gumbel.p.max.mcmc <- as.mcmc(gumbel.p.max$sims.matrix[, ])
# Convergence tests
gumbel.p.max.mcmc <- as.mcmc(gumbel.p.max$sims.matrix[, ])
# Results table, with parameters and weight estimates
hpd.interval.p.max <- HPDinterval(gumbel.p.max.mcmc)
results.p.max <- data.frame(
"Estimate"=gumbel.p.max$summary[, 1],
"HPD lower limit"=hpd.interval.p.max[, 1],
"HPD upper limit"=hpd.interval.p.max[, 2])
results.p.max <- round(results.p.max, 3)
# UPDATED FIT MIN
# Inputs for minimum
trend <- seq(1, 12)
min.sample <- prices.min
data.min <- list(x=trend, y=-min.sample, n=length(min.sample))
inits.min <- function(){ list(alpha0=-50, beta=2, alpha1=0.1)}
# Creating a text file to run the "bugs" function in OpenBUGS software
sink("gumbel_min.txt")
cat("
model {
# PRIOR DISTRIBUTIONS
alpha0 ~ dnorm(0.0, 0.000001)
beta ~ dnorm(0.0, 0.000001)
alpha1 ~ dnorm(0.0, 0.0001)
# LIKELIHOOD
for (i in 1:n) {
y[i] ~ dgumbel(alpha[i], beta)
alpha[i] <- alpha0 + alpha1 * x[i]
}
# PREDICTIVE
for(i in 2:6) {
min_p[i] <- ((alpha0 + alpha1 * (12 + i)) -
beta * log(-log(1 - (1 / i))))
}
}", fill=TRUE)
sink()
gumbel.min = bugs(data = data.min, inits = inits.min,
parameters =c("alpha0", "alpha1", "beta", "min_p"),
model = "gumbel_min.txt",
n.thin = 4, n.chains = 1,
n.burnin = 5000, n.iter = 12000, codaPkg=F)
# Convergence tests
gumbel.min.mcmc <- as.mcmc(gumbel.min$sims.matrix[, ])
# Results table, with parameters and weight estimates
hpd.interval.min <- HPDinterval(gumbel.min.mcmc)
results.min <- data.frame(
"Estimate"=gumbel.min$summary[, 1],
"HPD lower limit"=hpd.interval.min[, 1],
"HPD upper limit"=hpd.interval.min[, 2])
results.min <- round(results.min, 3)
max.sample <- prices.max
data.max <- list(y=max.sample, n=length(max.sample))
inits.max <- function(){list(alpha=rnorm(1), beta=1)}
# Creating a text file to run the "bugs" function in OpenBUGS software
sink("gumbel_max.txt")
cat("
model {
# PRIOR DISTRIBUTIONS
alpha ~ dnorm(0.0, 0.000001)
beta ~ dnorm(0.0, 0.000001)
# LIKELIHOOD
for (i in 1:n) {
y[i] ~ dgumbel(alpha, beta)
}
# PREDICTIVE
for(i in 2:6) {
max_p[i] <- alpha - beta * log(-log(1 - (1 / i)))
}
}", fill=TRUE)
sink()
gumbel.max = bugs(data = data.max, inits = inits.max,
parameters = c("alpha", "beta", "max_p"),
model = "gumbel_max.txt",
n.thin = 4, n.chains = 1,
n.burnin = 5000, n.iter = 12000, codaPkg=F)
# Convergence tests
gumbel.max.mcmc <- as.mcmc(gumbel.max$sims.matrix[, ])
hpd.interval.max <- HPDinterval(gumbel.max.mcmc)
results.max <- data.frame(
"Estimate"=gumbel.max$summary[, 1],
"HPD lower limit"=hpd.interval.max[, 1],
"HPD upper limit"=hpd.interval.max[, 2])
results.max <- round(results.max, 3)
volume.6 <- schumacher.vol.mcmc[, 9]
price.min.6 <- -gumbel.min.mcmc[, 8]
price.max.6 <- gumbel.max.mcmc[, 7]
price.min.max.6 <- melt(list("(B)"=price.min.6, "(C)"=price.max.6))
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3*ha⁻1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
#  labs(x=bquote("Volume"~(m^3*ha⁻1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
# Posterior density for volume at 6 years
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3*ha^⁻1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3*ha)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior
vol.posterior <- ggplot(
melt(list("(A)"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("(A)"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3*ha^-1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior
price.graph <- ggplot(
prices, aes(x=year, y=value, linetype=variable)) +
geom_line() +
labs(x="Year", y=bquote("Price (R$"~m^3*")")) +
scale_linetype_manual(values=c(2, 1)) +
scale_y_continuous(limits=c(37, 62)) +
scale_x_continuous(breaks=seq(2006, 2017, 2)) +
theme_grey(base_size=12) +
theme(axis.text = element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12))
# Show price graph
price.graph
price.posterior <- ggplot(
price.min.max.6, aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..),
colour="black", binwidth=1, size=0.3, position="stack") +
scale_fill_manual(
breaks=c("(B)", "(C)"),
values=c("white", "white")) +
scale_x_continuous(breaks=seq(12, 72, 10), limits=c(12, 72)) +
labs(x=bquote("Price (R$"~m^3*")"), y=element_blank()) +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())
price.posterior
# Joining graphs
posterior.vol.min.max <- plot_grid(vol.posterior, price.posterior)
# Show graphs
posterior.vol.min.max
price.min.max.6
vol.posterior <- ggplot(
melt(list("vol"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("vol"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3~ha^-1)), y="p(x)") +
theme_gray(base_size=12)
vol.posterior
vol.posterior <- ggplot(
melt(list("vol"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("vol"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(x=bquote("Volume"~(m^3~ha^-1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
legend.title=element_blank(),
legend.position="",
legend.text=element_text(size=12),
axis.ticks=element_line(color="black"))
vol.posterior
vol.posterior <- ggplot(
melt(list("vol"=volume.6)), aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..), colour="black", binwidth=1, size=0.3) +
scale_fill_manual(breaks=c("vol"), values=c("white")) +
scale_x_continuous(breaks=seq(305, 360, 11), limits=c(305, 360)) +
scale_y_continuous(breaks=seq(0, 0.5, 0.1), limits=c(0, 0.32)) +
labs(title="Volume", x=bquote("Volume"~(m^3~ha^-1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
plot.title=element_text(face="bold"),
legend.position="",
axis.ticks=element_line(color="black"))
vol.posterior
price.posterior <- ggplot(
price.min.max.6, aes(value, fill=L1)) +
geom_histogram(
aes(y=..density..),
colour="black", binwidth=1, size=0.3, position="stack") +
scale_fill_manual(
breaks=c("min", "max"),
values=c("white", "white")) +
scale_x_continuous(breaks=seq(12, 72, 10), limits=c(12, 72)) +
labs(title="Minimum and maximum prices",
x=bquote("Price"~(R*"$"~m^3)), y=element_blank()) +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
plot.title=element_text(face="bold"),
legend.position="",
axis.ticks.y=element_blank(),
axis.text.y=element_blank())
price.posterior
# Joining graphs
posterior.vol.min.max <- plot_grid(vol.posterior, price.posterior)
# Show graphs
posterior.vol.min.max
volume.6 <- schumacher.vol.mcmc[, 9]
price.min.6 <- -gumbel.min.mcmc[, 8]
price.max.6 <- gumbel.max.mcmc[, 7]
disc.rate <- 0.09
# Revenue
rev.min <- sort(
melt(as.numeric(volume.6) %o% as.numeric(price.min.6))$value)
rev.max <- sort(
melt(as.numeric(volume.6) %o% as.numeric(price.max.6))$value)
HPDinterval(as.mcmc(rev.min))
HPDinterval(as.mcmc(rev.max))
# Costs
costs <- data.frame(
age=c(      0,      1,      2,     3,     4,     5,     6),
val=c(1520.26, 836.82, 546.47, 75.52, 75.52, 75.52, 75.52))
Cj <- c()
for (i in 1 : length(costs$age)) {
Cj[i] <- costs$val[i] / (1 + disc.rate) ^ costs$age[i]
}
C <- sum(Cj)
# NPV
NPV.min <- (rev.min / (1 + disc.rate) ^ 6) - C
NPV.max <- (rev.max / (1 + disc.rate) ^ 6) - C
HPDinterval(as.mcmc(NPV.min))
HPDinterval(as.mcmc(NPV.max))
index <- c(
seq(1, length(rev.min), sqrt(length(rev.min))), length(rev.min))
NPV.min.thin <- c()
for (i in 1 : length(index)) {
NPV.min.thin[i] <- NPV.min[index[i]]
}
NPV.max.thin <- c()
for (i in 1 : length(index)) {
NPV.max.thin[i] <- NPV.max[index[i]]
}
min.max.melt <- melt(list("NPV_min"=NPV.min.thin,
"NPV_max"=NPV.max.thin))
min.max.dens <- ggplot(
min.max.melt, aes(value, fill=L1)) +
geom_histogram(
aes(y=..count../sum(..count..) * 2),
colour="black", bins=70, size=0.3, position="stack") +
scale_fill_manual(
breaks=c("NPV_min", "NPV_max"),
values=c("white", "white")) +
scale_x_continuous(breaks=seq(0, 11000, 2750), limits=c(0, 11000)) +
labs(title="NPV for minimum and maximum prices",
x=bquote("NPV"~(R*"$"~ha^-1)), y="p(x)") +
theme_gray(base_size=12) +
theme(axis.text=element_text(size=12, color="black"),
plot.title=element_text(face="bold"),
legend.position="",
axis.ticks=element_line(color="black"))
# Show graph
min.max.dens
